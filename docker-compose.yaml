version: "3.0"
services:
  maindb:
    image: mysql:latest
    container_name: api-server-maindb
    environment:
      MYSQL_ROOT_PASSWORD: root1234!
      MYSQL_DATABASE: maindb
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
      TZ: Asia/Seoul
    ports:
      - "3306:3306"
    volumes:
      - ./maindb/data:/var/lib/mysql
      - ./maindb/db/conf.d:/etc/mysql/conf.d
      - ./maindb/db/initdb.d:/docker-entrypoint-initdb.d
  zookeeper:
    image: arm64v8/zookeeper:3.9
    hostname: zookeeper
    restart: always
    ports:
    - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    # volumes:
    #   - /Users/beni/kafka/zoo1/data:/data
    #   - /Users/beni/kafka/zoo1/datalog:/datalog
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka
    # restart: always
    links:
      - zookeeper:zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
    # volumes:
    #   - /Users/beni/kafka/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
  # kafka:
  #   image: wurstmeister/kafka:2.12-2.5.0
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

  # init-kafka:
  #   image: confluentinc/cp-kafka:6.1.1
  #   depends_on:
  #     - kafka
  #   entrypoint: [ '/bin/sh', '-c' ]
  #   command: |
  #     "
  #     # blocks until kafka is reachable
  #     kafka-topics --bootstrap-server kafka:29092 --list

  #     echo -e 'Creating kafka topics'
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic topic --replication-factor 1 --partitions 1
  #     # kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic my-topic-2 --replication-factor 1 --partitions 1

  #     echo -e 'Successfully created the following topics:'
  #     kafka-topics --bootstrap-server kafka:29092 --list
  #     "